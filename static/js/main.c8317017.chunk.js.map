{"version":3,"sources":["components/Cell.js","components/DimensionsSelectAuto.js","components/UpdateDimensionsBtn.js","components/DimensionsSelectClick.js","components/DimensionsSelect.js","components/RemoveColor.js","components/Color.js","components/AddColor.js","components/ColorList.js","components/StyleOutput.js","components/QuiltGrid.js","serviceWorker.js","index.js"],"names":["Cell","_this","this","bgColor","props","color","styleHeight","height","styleWidth","width","react_default","a","createElement","className","style","backgroundColor","onClick","changeColor","Component","DimensionsSelectAuto","type","value","valX","onChange","e","change","name","nameX","units","valY","nameY","updateDimensionsBtn","DimensionsSelectClick","label","UpdateDimensionsBtn","changeBtn","DimensionsSelect","selectors","autoUpdate","components_DimensionsSelectAuto","components_DimensionsSelectClick","RemoveColor","removeColor","Color","styleColor","isActive","active","updateActiveColor","components_RemoveColor","AddColor","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","textColor","storeColor","bind","assertThisInitialized","clearColor","inputText","event","setState","target","addColor","ColorList","colorList","map","i","key","components_Color","activeColor","_this2","renderColorList","components_AddColor","StyleOutput","readOnly","QuiltGrid","colorCounters","cellCountX","cellCountY","storeCellCountX","storeCellCountY","cellHeight","cellWidth","colors","updateGridDimensions","storeGridDimensions","updateCellDimensions","rowNum","slice","widthDim","gridDimensions","calcGrid","gridColors","row","renderRow","_this3","components_Cell","countX","parseInt","countY","updateColorCounter","defineProperty","_this4","currentRow","length","currentCol","forEach","push","pop","Array","fill","filter","x","generateDiv","generateDivAfter","_this5","generateBoxShadowRow","toString","_this6","offsetY","_this7","renderGrid","components_DimensionsSelect","components_ColorList","components_StyleOutput","generateCSS","Boolean","window","location","hostname","match","ReactDOM","render","components_QuiltGrid","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8317017.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './style/Cell.css';\n\nclass Cell extends Component {\n\trender(){\n\t\t// const colors = this.props.colors\n\t\tconst bgColor = this.props.color\n\t\tconst styleHeight = this.props.height + 'px'\n\t\tconst styleWidth = this.props.width + 'px'\n\t\t// const dimensions = height: this.props.height + 'px', width: this.props.width + 'px'\n\n\t  return (\n\t    <div \n\t    \tclassName=\"Cell\" \n\t    \tstyle={{backgroundColor: bgColor, height: styleHeight, width: styleWidth}}\n\t    \tonClick={() => this.props.changeColor()}\n\t    >\n\t    </div>\n\t  )\n\t}\n}\n\nexport default Cell;\n","import React, {Component} from 'react';\nimport './style/DimensionsSelect.css';\n\nclass DimensionsSelectAuto extends Component {\n  render(){\n  \treturn (\n\n      <div className=\"dimensions\">\n\t      <input \n\t      \ttype=\"text\" \n\t      \tvalue={this.props.valX} \n\t      \tonChange={(e) => this.props.change(e)}\n\t      \tname = {this.props.nameX}\n\t      />\n\t      <label> X{this.props.units} </label>\n\n\t      <p className=\"dimesionsSeperator\">by</p>\n\n\t      <input \n\t      \ttype=\"text\" \n\t      \tvalue={this.props.valY} \n\t      \tonChange={(e) => this.props.change(e)}\n\t      \tname = {this.props.nameY}\n\t      />\n\t      <label> Y{this.props.units} </label>\n      </div>\n\t  );\n  }\n}\n\nexport default DimensionsSelectAuto;\n","import React, {Component} from 'react';\n\nclass updateDimensionsBtn extends Component {\n  render(){\n    return (\n    \t<button \n    \t\tclassName=\"updateBtn\"\n      \ttype=\"button\"\n      \tonClick={(e) => this.props.onClick(e)}\n      >\n      \tUpdate\n    \t</button>\n    )\n  }\n}\n\nexport default updateDimensionsBtn;","import React, {Component} from 'react';\nimport UpdateDimensionsBtn from './UpdateDimensionsBtn';\nimport './style/DimensionsSelect.css';\n\nclass DimensionsSelectClick extends Component {\n  render(){\n  \treturn (\n\t    <div className=\"dimensionsSelect\">\n\t      <h2 className=\"dimensionLabel\">{this.props.label}</h2>\n\n\t      <div className=\"dimensions\">\n\t\t      <input \n\t\t      \ttype=\"text\" \n\t\t      \tvalue={this.props.valX} \n\t\t      \tonChange={(e) => this.props.change(e)}\n\t\t      \tname = {this.props.nameX}\n\t\t      />\n\t\t      <label> X{this.props.units} </label>\n\n\t\t      <p className=\"dimesionsSeperator\">by</p>\n\n\t\t      <input \n\t\t      \ttype=\"text\" \n\t\t      \tvalue={this.props.valY} \n\t\t      \tonChange={(e) => this.props.change(e)}\n\t\t      \tname = {this.props.nameY}\n\t\t      />\n\t\t      <label> Y{this.props.units} </label>\n\t      </div>\n\n\t      <UpdateDimensionsBtn \n\t      \tonClick = {(e) => this.props.changeBtn(e)}\n\t      />\n\n\t    </div>\n\t  );\n  }\n}\n\nexport default DimensionsSelectClick;\n","import React, {Component} from 'react';\nimport DimensionsSelectAuto from './DimensionsSelectAuto';\nimport DimensionsSelectClick from './DimensionsSelectClick';\nimport './style/DimensionsSelect.css';\n\nclass DimensionsSelect extends Component {\n  render(){\n\n  \tlet selectors\n\n  \tif (this.props.autoUpdate) {\n  \t\tselectors = <DimensionsSelectAuto \n  \t\t\tvalX = {this.props.valX}\n  \t\t\tnameX = {this.props.nameX}\n  \t\t\tvalY = {this.props.valY}\n  \t\t\tnameY = {this.props.nameY}\n  \t\t\tunits = {this.props.units}\n  \t\t\tchange = {(e) => this.props.change(e)}\n  \t\t/>\n\t\t} else {\n\t\t\tselectors = <DimensionsSelectClick \n\t\t\t\tvalX = {this.props.valX}\n  \t\t\tnameX = {this.props.nameX}\n  \t\t\tvalY = {this.props.valY}\n  \t\t\tnameY = {this.props.nameY}\n  \t\t\tunits = {this.props.units}\n  \t\t\tchange = {(e) => this.props.change(e)}\n  \t\t\tchangeBtn = {(e) => this.props.changeBtn(e)}\n\t\t\t/>\n\t\t}\n\n  \treturn (\n\t    <div className=\"dimensionsSelect\">\n\t      <h2 className=\"dimensionLabel\">{this.props.label}</h2>\n\n\t      {selectors}\n\n\t    </div>\n\t  );\n  }\n}\n\nexport default DimensionsSelect;\n","import React, {Component} from 'react';\n// import './App.css';\n\nclass RemoveColor extends Component {\n  render(){\n    return (\n      <button \n      \tclassName=\"RemoveColor\" \n      \ttype=\"button\"\n      \tonClick={() => this.props.removeColor()}\n      >\n      \t-\n    \t</button>\n    );\n  }\n}\n\nexport default RemoveColor;\n","import React, {Component} from 'react';\nimport RemoveColor from './RemoveColor';\nimport './style/Color.css';\n\nclass Color extends Component{\n  render(){\n  \tconst styleColor = this.props.color;\n  \tconst isActive = this.props.active ? \"active Color\" : \"Color\"\n\n  \treturn (\n  \t\t<div className=\"\">\n\t      <div \n\t      \tclassName={isActive}\n\t      \tstyle={{backgroundColor: styleColor}}\n\t      \tonClick={this.props.updateActiveColor}\n\t      ></div>\n\t      <RemoveColor\n\t      \tremoveColor = {() => this.props.removeColor(this.props.color)}\n\t      />\n      </div>\n    );\n  }\n}\n\nexport default Color;\n","import React, {Component} from 'react';\nimport './style/AddColor.css';\n\nclass AddColor extends Component {\n\tconstructor(props) {\n    super(props);\n    this.state = {\n    \tvalue : \"Add Color\",\n    \ttextColor : \"#000\"\n    }\n    this.storeColor = this.storeColor.bind(this)\n    this.clearColor = this.clearColor.bind(this)\n    this.inputText = this.inputText.bind(this)\n  }\n\n  storeColor(event){\n  \tthis.setState({\n  \t\tvalue : event.target.value,\n  \t\ttextColor : event.target.value\n  \t})\n  }\n\n  clearColor(event){\n  \tthis.props.addColor(this.state.value)\n  \tthis.setState({\n  \t\tvalue : \"Add Color\",\n  \t\ttextColor : \"#000\"\n  \t})\n  }\n\n  inputText(event){\n  \tif (this.state.value === \"Add Color\"){\n\t  \tthis.setState({\n\t  \t\tvalue : \"\"\n\t  \t})\n  \t}\n  }\n\n\trender(){\n\t  return (\n\t    <div className=\"AddColor\">\n\t    \t<input \n\t    \t\ttype=\"text\" \n\t    \t\tvalue={this.state.value} \n\t    \t\tonChange={this.storeColor}\n\t    \t\tonClick={this.inputText}\n\t    \t\tstyle={{color:this.state.textColor}}\n\t    \t/>\n\t      <button \n\t      \tclassName=\"addColor\" \n\t      \ttype=\"button\" \n\t      \tonClick={this.clearColor}\n      \t>\n\t\t    \tAdd\n\t\t  \t</button>\n\t    </div>\n\t  );\n\t}\n}\n\nexport default AddColor;\n","import React, {Component} from 'react';\nimport Color from './Color';\nimport AddColor from './AddColor';\nimport './style/ColorList.css';\n\nclass ColorList extends Component {\n\n\trenderColorList(){\n\t\tconst colors = this.props.colorList.map((color, i) => \n\t\t\t<li key = {color + i}>\n\t\t\t\t<Color \n\t\t\t\t\tcolor = {color}\n\t\t\t\t\tremoveColor = {(e) => this.props.removeColor(e)}\n\t\t\t\t\tupdateActiveColor ={() => this.props.updateActiveColor(color)}\n\t\t\t\t\tactive = {(this.props.activeColor === color)}\n\t\t\t\t/>\n\t\t\t</li>\n\t\t)\n\n\t\treturn colors\n\t}\n\n\trender(){\n\t\treturn (\n\t    <div className=\"ColorList\">\n\t    \t<h2>Color Palette</h2>\n\t      <ul>\n\t\t\t    {this.renderColorList()}\n\t      </ul>\n\t      <AddColor \n\t      \taddColor = {(e) => this.props.addColor(e)}\n\t      />\n\t    </div>\n\n\t  );\n\t}\n}\n\nexport default ColorList;\n","import React, {Component} from 'react';\nimport './style/StyleOutput.css';\n\nclass StyleOutput extends Component{\n\n\trender(){\n\t\treturn (\n      <div className=\"StyleOutput\">\n      \t<textarea value={this.props.style} readOnly />\n      </div>\n    );\n\t}\n}\n\nexport default StyleOutput;\n","import React, {Component} from 'react';\nimport Cell from './Cell';\nimport DimensionsSelect from './DimensionsSelect';\nimport ColorList from './ColorList';\nimport StyleOutput from './StyleOutput';\nimport './style/QuiltGrid.css';\n\n\nclass QuiltGrid extends Component {\n\tconstructor(props) {\n    super(props);\n    this.state = {\n    \tcolorCounters: [['white', 'white', 'white', 'white', 'white'], \n    \t\t\t\t\t\t\t\t\t['white', 'white', 'white', 'white', 'white'],\n    \t\t\t\t\t\t\t\t\t['white', 'white', 'white', 'white', 'white'],\n    \t\t\t\t\t\t\t\t\t['white', 'white', 'white', 'white', 'white'],\n    \t\t\t\t\t\t\t\t\t['white', 'white', 'white', 'white', 'white']],\n    \tactiveColor: 'white',\n    \t// X --> # of colummns, Y --> # of rows\n    \tcellCountX: 5,\n    \tcellCountY: 5,\n    \tstoreCellCountX: 5,\n    \tstoreCellCountY: 5,\n    \tcellHeight: 30,\n    \tcellWidth: 30,\n    \tcolors: ['white', 'hotpink', 'salmon', 'khaki', 'palegreen', 'aquamarine', 'skyblue', 'violet', 'pink', 'slateblue','darkslateblue'],\n    };\n    this.updateGridDimensions = this.updateGridDimensions.bind(this);\n    this.storeGridDimensions = this.storeGridDimensions.bind(this);\n    this.updateCellDimensions = this.updateCellDimensions.bind(this);\n  }\n\n\t// click function for the color cell\n\tchangeColor(rowNum, i){\n\t\tlet colorCounters = this.state.colorCounters.slice()\n\t\tcolorCounters[rowNum][i] = this.state.activeColor\n\n\t\tthis.setState({colorCounters : colorCounters})\n\t}\n\n\t// calculate the height and width of the grid render in px\n\tcalcGrid(){\n\t\tconst widthDim = (this.state.cellWidth * this.state.cellCountX) + (3 * this.state.cellCountX)\n\t\tconst heightDim = (this.state.cellHeight * this.state.cellCountY) + (3 * this.state.cellCountY)\n\n\t\treturn {height: heightDim + 'px', width: widthDim + 'px'}\n\t}\n\n\t// return grid based on form inputs\n\trenderGrid(){\n\t\t// style for the grid output\n\t\tconst gridDimensions = this.calcGrid()\n\t\t// copy of colors from state\n\t\tlet gridColors = this.state.colorCounters.slice()\n\n\t\tgridColors = gridColors.map((row, i) => \n\t\t\tthis.renderRow(row, i)\n  \t)\n\n\t\treturn(\n\t\t\t<div \n      \tclassName=\"grid\"\n      \tstyle={gridDimensions}\n      >\n      \t{gridColors}\n      </div>\n\t\t)\n\t}\n\n\t// return row of cells for the grid output\n\trenderRow(row, rowNum){\n\t\treturn(\n\t\t\trow.map((color, i) => \n\t\t\t\t<Cell \n\t\t\t\t\tkey = {\"row\" + rowNum + \"col\" + i}\n\t    \t\tcolor = {this.state.colorCounters[rowNum][i]}\n\t    \t\tchangeColor = {() => this.changeColor(rowNum, i)}\n\t    \t\theight = {this.state.cellHeight}\n\t    \t\twidth = {this.state.cellWidth}\n\t    \t/>\n\t\t\t)\n\t\t)\n\t}\n\n\t// update grid dimensions based on input\n\tupdateGridDimensions(event){\n\t\tconst countX = parseInt(this.state.storeCellCountX)\n\t\tconst countY = parseInt(this.state.storeCellCountY)\n\t\tthis.setState({\n\t\t\tcellCountX : countX,\n\t\t\tcellCountY : countY\n\t\t}, this.updateColorCounter(countX, countY))\n\t}\n\n\t// store grid dimensions based on input\n\tstoreGridDimensions(event){\n\t\tthis.setState({\n\t\t\t[event.target.name] : event.target.value\n\t\t})\n\t}\n\n\t// update cell dimensions based on inpuu\n\tupdateCellDimensions(event){\n\t\tthis.setState({\n\t\t\t[event.target.name] : event.target.value\n\t\t})\n\t}\n\n\t// update color counter to match grid dimensions in set state\n\tupdateColorCounter(countX, countY){\n\t\tconst currentRow = this.state.colorCounters.length\n\t\tconst currentCol = this.state.colorCounters[0].length\n\t\tlet colorCounters = this.state.colorCounters.slice()\n\n\t\t// add to every row\n\t\tif (countX > currentCol && countX !== ''){\n\t\t\tcolorCounters.forEach((row) => {\n\t\t\t\t\tfor (let i = currentCol; i < countX; i++){\n\t\t\t\t\trow.push(this.state.activeColor)\n\t\t\t\t}\n\t\t\t})\n\t\t// remove from every row\n\t\t}\telse if (countX < currentCol && countX !== ''){\n\t\t\tcolorCounters.forEach((row) => {\n\t\t\t\tfor (let i = countX; i < currentCol; i++){\n\t\t\t\t\trow.pop()\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\n\t\t// add row\n\t\tif (countY > currentRow && countY !== ''){\n\t\t\tfor (let i = currentRow; i < countY; i++){\n\t\t\t\t\tcolorCounters.push(Array(colorCounters[0].length).fill(this.state.activeColor))\n\t\t\t\t}\n\t\t}\n\t\t// remove row\n\t\tif (countY < currentRow && countY !== ''){\n\t\t\tfor (let i = countY; i < currentRow; i++){\n\t\t\t\t\tcolorCounters.pop()\n\t\t\t\t}\n\t\t}\n\n\t\tthis.setState({colorCounters : colorCounters})\n\t}\n\n\t// add new color to the list\n\taddColor(color){\n\t\tlet colors = this.state.colors.slice()\n\t\tcolors.push(color)\n\t\tthis.setState({\n\t\t\tcolors : colors\n\t\t})\n\t}\t\n\n\t// remove color from the list\n\tremoveColor(color){\n\t\tlet colors = this.state.colors.slice()\n\t\tcolors = colors.filter((x) => \n\t\t\tx !== color\n\t\t)\n\t\tif (this.state.activeColor === color){\n\t\t\tthis.setState({\n\t\t\t\tcolors : colors,\n\t\t\t\tactiveColor : \"white\"\n\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tcolors : colors\n\t\t\t})\n\t\t}\n\t\t\n\t}\n\n\t// update active color\n\tupdateActiveColor(activeColor){\n\t\tthis.setState({\n\t\t\tactiveColor\n\t\t})\n\t}\n\n\t// generate css for displaying as CSS for a single div\n\tgenerateCSS(){\n\t\t// const styleWidth = \"  width: \" + this.state.cellWidth +\"px;\\n\"\n\t\t// const styleHeight = \"  height: \" + this.state.cellHeight + \"px;\\n\"\n\t\t// const styleBgColor = \"  background-color: \" + this.state.colorCounters[0][0] + \";\\n\"\n\t\t// const styleBoxShadow = this.state.colorCounters.map((row,i) => {\n\t\t// \treturn \"\\n\" + this.generateBoxShadowRow(row, i)\n\t\t// })\n\n\t\t// return \".quilt{\\n  display:block;\\n\" + styleWidth + styleHeight + styleBgColor +\"  box-shadow: \" + styleBoxShadow.toString()+ \";\\n}\"\n\t\treturn this.generateDiv() + \"\\n\\n\" + this.generateDivAfter()\n\t}\n\n\t// generate main div css\n\tgenerateDiv(){\n\t\tconst divHeight =  \"height: \" + (this.state.cellHeight * this.state.cellCountY) + \"px;\\n\"\n\t\tconst divWidth = \"width: \" + (this.state.cellWidth * this.state.cellCountX) + \"px;\\n\"\n\t\tconst styleBgColor = \"  background-color: \" + this.state.colorCounters[0][0] + \";\\n\"\n\n\t\treturn \".quilt{\\n  \" + divHeight + \"  \" + divWidth + styleBgColor +\"  display: block;\\n}\"\n\t}\n\tgenerateDivAfter(){\n\t\tconst styleWidth = \"  width: \" + this.state.cellWidth +\"px;\\n\"\n\t\tconst styleHeight = \"  height: \" + this.state.cellHeight + \"px;\\n\"\n\t\tconst styleBoxShadow = this.state.colorCounters.map((row,i) => {\n\t\t\treturn \"\\n\" + this.generateBoxShadowRow(row, i)\n\t\t}).toString()\n\n\t\treturn \".quilt:after{\\n  content:'';\\n  display:block;  \" + styleWidth + styleHeight + \"  box-shadow: \" + styleBoxShadow + \";\\n}\"\n\t}\n\n\n\t// generate css for a row in the box shadow\n\tgenerateBoxShadowRow(row, rowNum){\n\t\tconst offsetY = (rowNum * this.state.cellHeight) + \"px\"\n\t\tlet offsetX\n\n\t\treturn row.map((color, i) =>{\n\t\t\toffsetX = (i * this.state.cellWidth) + \"px\"\n\t\t\treturn \"\\n\\t\" + offsetX + \" \" + offsetY + \" \" + color\n\t\t})\n\t}\n\n\n\t// RENDER METHOD\n\trender(){\n\n\t\treturn (\n\t    <div className=\"QuiltGrid\">\n\t    \t<div className=\"gridEditor\">\n\t\t      {this.renderGrid()}\n\t      </div>\n\n\t      <div className=\"userInput\">\n\t      \t<DimensionsSelect \n\t      \t\tlabel = {'Dimensions'}\n\t      \t\tunits = {\"cells\"}\n\t      \t\tvalX = {this.state.storeCellCountX}\n\t      \t\tvalY = {this.state.storeCellCountY}\n\t      \t\tnameX = \"storeCellCountX\"\n\t      \t\tnameY = \"storeCellCountY\"\n\t      \t\tautoUpdate = {false}\n\t      \t\tchange = {(e) => this.storeGridDimensions(e)}\n\t      \t\tchangeBtn = {(e) => this.updateGridDimensions(e)}\n\t      \t/>\n\t      \t<DimensionsSelect \n\t      \t\tlabel = {\"Cell Dimensions\"}\n\t      \t\tunits = {\"px\"}\n\t      \t\tvalX = {this.state.cellWidth}\n\t      \t\tvalY = {this.state.cellHeight}\n\t      \t\tnameX = \"cellWidth\"\n\t      \t\tnameY = \"cellHeight\"\n\t      \t\tautoUpdate = {true}\n\t      \t\tchange = {(e) => this.updateCellDimensions(e)}\n\t      \t/>\n\n\t      \t<ColorList \n\t      \t\tcolorList = {this.state.colors}\n\t      \t\taddColor = {(e) => this.addColor(e)}\n\t      \t\tremoveColor = {(e) => this.removeColor(e)}\n\t      \t\tupdateActiveColor ={(e) => this.updateActiveColor(e)}\n\t      \t\tactiveColor = {this.state.activeColor}\n\t      \t/>\n\n\t      \t<StyleOutput \n\t      \t\tstyle = {this.generateCSS()}\n\t      \t/>\n\t      </div>\n\t    </div>\n\t  ); \n\t}\n}\n\nexport default QuiltGrid;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuiltGrid from './components/QuiltGrid';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<QuiltGrid />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}